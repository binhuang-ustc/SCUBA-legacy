This directory contains an example  to run SCUBA-driven SD on an 
intitial structure of a user-defined backbone sketch to obtain an optimized backbone.
A backbone selected from the final results of this step can be used for loop resampling/optimization.

The following files are provided as starting points for this demo:

1.initial.pdb: the initial pdb structure;
2.SDINPUT.template: it is a template to help you prepare input.
  Read the header of this file for instructions of how to process this file to
  prepare an input file to control SCUBA-drifen SD simulation;
3.As examples of editing SDINPUT.template, we have prepared the files from "sd1-1.in.uncommented"
  to "sd2-3.in.uncommmented".
  We use the lable  "2-3" (or "1-1") to refer to the 3rd (1st) simulation of the 2nd(1st) substage, and so on;
4.RunDemo.sh: the shell script that runs the demo to  generate one optimized backbone
  Because of the stochastic nature of the SD simulations,  one can choose different seeds for the random number 
  generator used for SD in RunDemo.sh to produce different optimized backbones (of varied structures and energies);
5.Executing RunDemol.sh will generate the following result files.
  sdx-x.in: actual inputs for controling the different SD simulations of different substages.
  outx-x.pdb: pdb structures generated by the different SD simulations of different substages. 
  x-x.log: log files of the SD simulations.
  optimized_with_seed_xxx.pdb: the optimized backbone after the last SD simulation; 
6.cleanup.sh: remove the files generated by RunDemo.sh;
7.refressults/ref_optimized_with_seed_xxx.pdb: For testing if the code runs properly.
  If you choose xxx as random seed (and use one OMP_THREAD in RunDemo.sh), the result file 
  optimized_with_seed_xxx.pdb should reproduce the corresponding file under refresults/. 
  Note: If multiple threads are used for each SD run, the trajectories from different runs on the same input
  will start to diverge after a few thousand SD steps. The final structures can be quite different for long SD simulations. 
  This is not an error, but is just results of accumulation of differentiation effects caused by that operations 
  such as the sum of data from multiple threads are executed not in the same order in different runs.
